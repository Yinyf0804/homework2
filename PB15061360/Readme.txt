以下为说明
************************************
头文件：Core.h
提供 x64,x86的release和debug模式
************************************
************************************
使用例子：
QuestionSetGenerator q;
string s = "+-*^@";
q.Setting(10, 4, s, 0, 1, 100);
q.Generate();

算式保存在formula.txt中
结果保存在result.txt中
二者一一对应
************************************
简洁版：

Setting(int 问题数, int 运算符号数, string 运算符号种类, int 模式（数的类型）, int 数的下界, int 数的上界)

Generate()

注意：

参数范围、运算符号种类以“@”结尾，乘方只能用模式0（整数）
************************************
************************************
详细版：

可以控制的参数：问题数，运算符号数，运算符号种类，模式（数的类型），数的范围

问题数、运算符号数均为大于0的整数值

运算符号支持： + - * / ^    (‘@’：在使用setting时以此为数组的结尾，具体请看setting解释）

模式有三种： 整数，小数，（支持）分数
************************************
可用的函数有三个：

int Setting(int question_number, int operator_number, string oper, int question_type, int lower_bound, int upper_bound);

question_number: 问题数 范围:（>0)

operator_number: 运算符号数 范围：(>0)

oper: 运算符种类，请以"..."方式传入，
!!!!!!以‘@’作为结尾!!!!!!!
!!!!!!以‘@’作为结尾!!!!!!!
!!!!!!以‘@’作为结尾!!!!!!!
@ 符号：shift+2
重要的事说三遍！！
例如 "+,-,*,/,@", "+,-,*,^,@"
支持类型：+ - * / ^ 以及 @

question_type: 模式（数的类型） 0 代表 整数，1 代表 小数，2 代表 （支持）分数

lower_bound,upper_bound: 数范围的上下界，lower_bound为下界，upper_bound为上界

！！（幂运算只支持整数）

************************************
void Generate();                     //产生题目并写文件

生成算式，这个直接用就行了，没什么可以解释的。
************************************
算式保存在formula.txt中
结果保存在result.txt中
二者一一对应
************************************
这是最终版本，各位有什么问题欢迎随时联系：
陈修远 尹宇飞
